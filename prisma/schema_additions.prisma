// Migration Prisma pour ajouter les tables et colonnes manquantes à EduTrack CM

// =============================================================================
// NOUVELLES TABLES NÉCESSAIRES
// =============================================================================

// Table des périodes d'évaluation (trimestres, semestres)
model EvaluationPeriod {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  schoolId       String   @map("school_id") @db.Uuid
  academicYearId String   @map("academic_year_id") @db.Uuid
  name           String
  startDate      DateTime @map("start_date") @db.Date
  endDate        DateTime @map("end_date") @db.Date
  isCurrent      Boolean  @default(false) @map("is_current")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  school         School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)

  @@unique([schoolId, academicYearId, name])
  @@map("evaluation_periods")
}

// Table des types de notes configurables
model GradeTypeConfig {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  schoolId    String  @map("school_id") @db.Uuid
  name        String
  code        String
  coefficient Decimal @default(1.0) @db.Decimal(3, 2)
  description String?
  isActive    Boolean @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  school      School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([schoolId, code])
  @@map("grade_types")
}

// Table des rôles utilisateur personnalisés
model UserRoleConfig {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  schoolId    String  @map("school_id") @db.Uuid
  name        String
  code        String
  permissions Json    @default("[]")
  isActive    Boolean @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  school      School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([schoolId, code])
  @@map("user_roles")
}

// Table des types de présence configurables
model AttendanceTypeConfig {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  schoolId    String  @map("school_id") @db.Uuid
  name        String
  code        String
  description String?
  isActive    Boolean @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  school      School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([schoolId, code])
  @@map("attendance_types")
}

// Table des types de paiements configurables
model PaymentTypeConfig {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  schoolId    String   @map("school_id") @db.Uuid
  name        String
  code        String
  amount      Decimal? @db.Decimal(10, 2)
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  school      School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([schoolId, code])
  @@map("payment_types")
}