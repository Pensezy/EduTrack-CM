import { supabase } from './src/lib/supabase.js';

async function testSchoolData() {
  console.log('üîç Test de r√©cup√©ration des donn√©es d\'√©cole...');
  
  try {
    // 1. V√©rifier l'utilisateur connect√©
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    if (userError) {
      console.error('‚ùå Erreur utilisateur:', userError);
      return;
    }
    
    if (!user) {
      console.log('‚ùå Aucun utilisateur connect√©');
      return;
    }
    
    console.log('‚úÖ Utilisateur connect√©:', user.email);
    console.log('üë§ User ID:', user.id);
    
    // 2. Chercher l'√©cole par director_user_id
    console.log('\nüîç Recherche de l\'√©cole...');
    const { data: schools, error: schoolsError } = await supabase
      .from('schools')
      .select('*')
      .eq('director_user_id', user.id);
    
    if (schoolsError) {
      console.error('‚ùå Erreur recherche √©coles:', schoolsError);
      return;
    }
    
    console.log('üìä √âcoles trouv√©es:', schools?.length || 0);
    
    if (schools && schools.length > 0) {
      const school = schools[0];
      console.log('‚úÖ √âcole trouv√©e:');
      console.log('  - ID:', school.id);
      console.log('  - Nom:', school.name);
      console.log('  - Type:', school.type);
      console.log('  - Adresse:', school.address);
      console.log('  - Ville:', school.city);
      console.log('  - Pays:', school.country);
      console.log('  - Classes disponibles:', school.available_classes);
      console.log('  - Statut:', school.status);
      console.log('  - Directeur ID:', school.director_user_id);
      
      // 3. Test avec jointure pour r√©cup√©rer le directeur
      console.log('\nüîç Test avec jointure directeur...');
      const { data: schoolWithDirector, error: joinError } = await supabase
        .from('schools')
        .select('*, users!director_user_id (id, full_name, email)')
        .eq('id', school.id)
        .single();
      
      if (joinError) {
        console.error('‚ùå Erreur jointure directeur:', joinError);
      } else {
        console.log('‚úÖ √âcole avec directeur:');
        console.log('  - √âcole:', schoolWithDirector.name);
        console.log('  - Directeur:', schoolWithDirector.users);
      }
      
    } else {
      console.log('‚ùå Aucune √©cole trouv√©e pour cet utilisateur');
      
      // V√©rifier si il y a des √©coles dans la base
      const { data: allSchools, error: allError } = await supabase
        .from('schools')
        .select('id, name, director_user_id');
      
      if (!allError && allSchools) {
        console.log('\nüìã Toutes les √©coles dans la base:');
        allSchools.forEach(s => {
          console.log(`  - ${s.name} (ID: ${s.id}, Directeur: ${s.director_user_id})`);
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

testSchoolData();