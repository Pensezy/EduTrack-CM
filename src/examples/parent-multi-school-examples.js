// Exemple d'utilisation du service de gestion multi-√©tablissements des parents
import { parentMultiSchoolService } from './services/parentMultiSchoolService.js';

// EXEMPLE D'USAGE : Comment √©viter les doublons de parents et g√©rer multi-√©tablissements

async function exempleInscriptionEtudiant() {
  console.log('üéØ EXEMPLE : Inscription d\'un √©tudiant avec gestion centralis√©e des parents');
  console.log('='.repeat(70));

  try {
    // √âTAPE 1: Donn√©es d'inscription re√ßues du formulaire
    const donneesInscription = {
      // Donn√©es de l'√©tudiant
      student: {
        firstName: 'Paul',
        lastName: 'Kamga',
        dateOfBirth: '2010-03-15',
        gender: 'male',
        schoolId: 'school-001', // Lyc√©e Bilingue Biyem-Assi
        classId: 'class-terminale-c'
      },
      // Donn√©es du parent
      parent: {
        firstName: 'Jean',
        lastName: 'Kamga',
        email: 'jean.kamga@gmail.com',
        phone: '+237678901234',
        address: 'Yaound√©, Cameroun',
        profession: 'Ing√©nieur'
      }
    };

    // √âTAPE 2: V√©rifier si le parent existe d√©j√† dans le syst√®me
    console.log('\nüîç √âTAPE 2: V√©rification du parent existant...');
    
    const parentExistant = await parentMultiSchoolService.checkExistingParent(
      donneesInscription.parent.email,
      donneesInscription.parent.phone
    );

    if (parentExistant) {
      console.log('‚úÖ Parent existant trouv√© !');
      console.log(`   - Nom: ${parentExistant.firstName} ${parentExistant.lastName}`);
      console.log(`   - Email: ${parentExistant.email}`);
      console.log(`   - Enfants actuels: ${parentExistant.studentRelations.length}`);
      
      // Afficher les √©coles o√π ce parent a d√©j√† des enfants
      const ecolesParent = [...new Set(parentExistant.studentRelations.map(rel => rel.school.name))];
      console.log(`   - √âcoles: ${ecolesParent.join(', ')}`);
      
      console.log('\nüéØ ACTION: Utilisation du compte parent existant (pas de doublon cr√©√©)');
    } else {
      console.log('‚ûï Nouveau parent - Cr√©ation d\'un compte centralis√©');
    }

    // √âTAPE 3: Cr√©er ou r√©cup√©rer le parent (gestion centralis√©e)
    console.log('\nüîß √âTAPE 3: Gestion centralis√©e du parent...');
    
    const parent = await parentMultiSchoolService.getOrCreateParent({
      ...donneesInscription.parent,
      userId: 'user-parent-kamga' // ID utilisateur Supabase Auth
    });

    console.log(`‚úÖ Parent g√©r√©: ${parent.firstName} ${parent.lastName} (ID: ${parent.globalParentId})`);

    // √âTAPE 4: Cr√©er l'√©tudiant (logique normale)
    console.log('\nüë®‚Äçüéì √âTAPE 4: Cr√©ation de l\'√©tudiant...');
    // Ici vous utiliseriez votre logique normale de cr√©ation d'√©tudiant
    console.log('‚úÖ √âtudiant cr√©√© (simul√©)');

    // √âTAPE 5: Lier le parent √† l'√©tudiant dans cette √©cole sp√©cifique
    console.log('\nüîó √âTAPE 5: Liaison parent-√©tudiant-√©cole...');
    
    const relationParentEtudiant = await parentMultiSchoolService.linkParentToStudentInSchool(
      parent.id,
      'student-paul-kamga-id', // ID de l'√©tudiant cr√©√©
      donneesInscription.student.schoolId,
      {
        relationshipType: 'parent',
        isPrimaryContact: true,
        canPickup: true,
        emergencyContact: true
      }
    );

    console.log('‚úÖ Relation cr√©√©e avec succ√®s !');
    console.log(`   - Parent: ${relationParentEtudiant.parent.firstName} ${relationParentEtudiant.parent.lastName}`);
    console.log(`   - √âtudiant: ${relationParentEtudiant.student.firstName} ${relationParentEtudiant.student.lastName}`);
    console.log(`   - √âcole: ${relationParentEtudiant.school.name}`);

    // √âTAPE 6: V√©rifier le r√©sultat - Parent peut maintenant voir tous ses enfants
    console.log('\nüìä √âTAPE 6: Vue du parent sur tous ses enfants...');
    
    const enfantsParent = await parentMultiSchoolService.getParentChildren(parent.id);
    
    console.log(`‚úÖ Le parent ${parent.firstName} ${parent.lastName} peut maintenant voir:`);
    enfantsParent.forEach((relation, index) => {
      console.log(`   ${index + 1}. ${relation.student.firstName} ${relation.student.lastName}`);
      console.log(`      - √âcole: ${relation.school.name} (${relation.school.city})`);
      console.log(`      - Classe: ${relation.student.class?.name || 'Non assign√©e'}`);
      console.log(`      - Relation: ${relation.relationshipType}`);
      console.log(`      - Contact principal: ${relation.isPrimaryContact ? 'Oui' : 'Non'}`);
    });

    // √âTAPE 7: Statistiques du parent
    console.log('\nüìà √âTAPE 7: Statistiques du parent...');
    
    const statsParent = await parentMultiSchoolService.getParentStatistics(parent.id);
    
    console.log('‚úÖ Statistiques:');
    console.log(`   - Total enfants: ${statsParent.totalChildren}`);
    console.log(`   - Enfants actifs: ${statsParent.activeChildren}`);
    console.log(`   - Nombre d'√©coles: ${statsParent.schoolsCount}`);
    console.log('   - √âcoles:');
    statsParent.schools.forEach(school => {
      console.log(`     ‚Ä¢ ${school.name}: ${school.childrenCount} enfant(s)`);
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'exemple:', error.message);
  }
}

// EXEMPLE 2: Recherche de parents existants lors de l'inscription
async function exempleRechercheParents() {
  console.log('\nüîç EXEMPLE 2: Recherche de parents existants');
  console.log('='.repeat(50));

  try {
    // Simuler une recherche par nom
    const resultatsRecherche = await parentMultiSchoolService.searchExistingParents('Kamga');
    
    console.log(`‚úÖ ${resultatsRecherche.length} parent(s) trouv√©(s) pour "Kamga":`);
    
    resultatsRecherche.forEach((parent, index) => {
      console.log(`\n${index + 1}. ${parent.firstName} ${parent.lastName}`);
      console.log(`   - Email: ${parent.email}`);
      console.log(`   - T√©l√©phone: ${parent.phone}`);
      console.log(`   - Profession: ${parent.profession || 'Non renseign√©e'}`);
      console.log(`   - Total enfants: ${parent.totalChildren}`);
      console.log(`   - √âcoles: ${parent.schools.join(', ')}`);
      console.log(`   - Enfants: ${parent.children.join(', ')}`);
    });

    console.log('\nüí° L\'√©tablissement peut maintenant:');
    console.log('   ‚úÖ Proposer au secr√©taire de s√©lectionner un parent existant');
    console.log('   ‚úÖ √âviter la cr√©ation de doublons');
    console.log('   ‚úÖ Maintenir l\'historique du parent dans tous les √©tablissements');

  } catch (error) {
    console.error('‚ùå Erreur lors de la recherche:', error.message);
  }
}

// EXEMPLE 3: Cas d'usage r√©el - Parent avec enfants dans 2 √©coles diff√©rentes
async function exempleParentMultiEcoles() {
  console.log('\nüè´ EXEMPLE 3: Parent avec enfants dans plusieurs √©coles');
  console.log('='.repeat(55));

  try {
    // Le parent Jean Kamga a d√©j√† Paul au Lyc√©e Biyem-Assi
    // Maintenant il inscrit Aminata au Coll√®ge La Rochelle

    const donneesNouvelleInscription = {
      student: {
        firstName: 'Aminata',
        lastName: 'Kamga',
        dateOfBirth: '2012-07-20',
        gender: 'female',
        schoolId: 'school-002', // Coll√®ge La Rochelle Douala
        classId: 'class-2nde-a'
      },
      parent: {
        email: 'jean.kamga@gmail.com', // M√™me email que pour Paul
        phone: '+237678901234'
      }
    };

    console.log('üîç V√©rification du parent pour la nouvelle inscription...');
    
    // Le syst√®me trouve automatiquement le parent existant
    const parentExistant = await parentMultiSchoolService.checkExistingParent(
      donneesNouvelleInscription.parent.email,
      donneesNouvelleInscription.parent.phone
    );

    if (parentExistant) {
      console.log('‚úÖ Parent Jean Kamga d√©j√† dans le syst√®me !');
      console.log('   - Pas besoin de cr√©er un nouveau compte');
      console.log('   - Les 2 √©coles peuvent communiquer avec le m√™me parent');
      console.log('   - Le parent voit tous ses enfants dans un seul dashboard');

      // Cr√©er la nouvelle relation pour Aminata
      await parentMultiSchoolService.linkParentToStudentInSchool(
        parentExistant.id,
        'student-aminata-kamga-id',
        donneesNouvelleInscription.student.schoolId
      );

      console.log('\nüéØ R√âSULTAT FINAL:');
      const enfantsFinaux = await parentMultiSchoolService.getParentChildren(parentExistant.id);
      
      console.log(`Parent ${parentExistant.firstName} ${parentExistant.lastName} voit maintenant:`);
      enfantsFinaux.forEach(relation => {
        console.log(`   ‚Ä¢ ${relation.student.firstName} - ${relation.school.name} (${relation.school.city})`);
      });
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'exemple multi-√©coles:', error.message);
  }
}

// Exporter les fonctions d'exemple
export {
  exempleInscriptionEtudiant,
  exempleRechercheParents,
  exempleParentMultiEcoles
};

// Pour tester, d√©commentez ces lignes:
// exempleInscriptionEtudiant();
// exempleRechercheParents(); 
// exempleParentMultiEcoles();