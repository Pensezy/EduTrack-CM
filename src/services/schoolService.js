// Service principal pour l'authentification et la gestion des √©coles
// Utilise Supabase pour les op√©rations c√¥t√© client (Prisma ne fonctionne que c√¥t√© serveur)

import { supabase } from '../lib/supabase.js';

/**
 * Service pour cr√©er une √©cole et lier un directeur
 * Utilise Supabase directement (compatible c√¥t√© client)
 */
export const createPrincipalSchool = async ({
  directorName,
  email,
  phone,
  schoolName,
  schoolType,
  address,
  city = 'Yaound√©',
  country = 'Cameroun',
  availableClasses = [],
  userId = null // ID utilisateur Supabase Auth
}) => {
  try {
    console.log('üè´ Service createPrincipalSchool appel√© avec:', {
      directorName,
      email,
      schoolName,
      schoolType,
      userId
    });

    let authUserId = userId;
    
    // 1. Si pas d'userId fourni, r√©cup√©rer l'utilisateur actuel connect√©
    if (!authUserId) {
      const { data: currentUser, error: currentUserError } = await supabase.auth.getUser();
      
      if (currentUserError || !currentUser?.user) {
        throw new Error('Aucun utilisateur connect√©. Veuillez vous reconnecter.');
      }
      
      authUserId = currentUser.user.id;
    }

    console.log('üë§ Utilisation de l\'ID utilisateur:', authUserId);

    // 2. V√©rifier si l'utilisateur a d√©j√† une √©cole
    const { data: existingSchools, error: checkError } = await supabase
      .from('schools')
      .select('id, name')
      .eq('director_user_id', authUserId);

    if (checkError) {
      console.error('‚ùå Erreur v√©rification √©cole existante:', checkError);
      throw new Error('Erreur lors de la v√©rification des √©coles existantes');
    }

    if (existingSchools && existingSchools.length > 0) {
      throw new Error(`Cet utilisateur a d√©j√† une √©cole associ√©e: ${existingSchools[0].name}`);
    }

    // 3. G√©n√©rer un code unique pour l'√©cole
    let schoolCode;
    let isUnique = false;
    let attempts = 0;
    const maxAttempts = 10;
    
    while (!isUnique && attempts < maxAttempts) {
      const prefix = schoolName.replace(/\s+/g, '').substring(0, 3).toUpperCase();
      const year = new Date().getFullYear();
      const random = Math.floor(Math.random() * 999).toString().padStart(3, '0');
      schoolCode = `${prefix}-${year}-${random}`;
      
      console.log(`üîç Tentative ${attempts + 1}: V√©rification unicit√© du code ${schoolCode}`);
      
      try {
        const { data: existing, error: existingError } = await supabase
          .from('schools')
          .select('id')
          .eq('code', schoolCode)
          .maybeSingle();
        
        if (existingError) {
          console.warn('‚ö†Ô∏è Erreur v√©rification code √©cole:', existingError);
          if (existingError.code === '406' || existingError.status === 406) {
            console.log('üí° Erreur 406 d√©tect√©e, on continue avec un autre code...');
            isUnique = false;
          } else {
            // Pour les autres erreurs, on assume que le code est unique
            isUnique = true;
          }
        } else {
          isUnique = !existing;
          console.log(`‚úÖ Code ${schoolCode} ${isUnique ? 'disponible' : 'd√©j√† utilis√©'}`);
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Exception lors de la v√©rification:', error);
        // En cas d'exception, on assume que le code est unique
        isUnique = true;
      }
      
      attempts++;
    }

    if (!isUnique) {
      // G√©n√©rer un code de secours bas√© sur timestamp pour √©viter les conflits
      const timestamp = Date.now().toString().slice(-4);
      const prefix = schoolName.replace(/\s+/g, '').substring(0, 3).toUpperCase();
      schoolCode = `${prefix}-${new Date().getFullYear()}-${timestamp}`;
      console.log('üîÑ Code de secours g√©n√©r√©:', schoolCode);
    }

    console.log('üî¢ Code √©cole final:', schoolCode);

    // 4. Cr√©er l'utilisateur dans la table users
    const { data: userData, error: userError } = await supabase
      .from('users')
      .upsert({
        id: authUserId,
        email: email,
        full_name: directorName,
        phone: phone,
        role: 'principal',
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()
      .single();

    if (userError) {
      console.error('‚ùå Erreur cr√©ation utilisateur:', userError);
      throw new Error(`Erreur lors de la cr√©ation de l'utilisateur: ${userError.message}`);
    }

    console.log('‚úÖ Utilisateur cr√©√©/mis √† jour:', userData.id);

    // 5. Cr√©er l'√©cole
    const { data: schoolData, error: schoolError } = await supabase
      .from('schools')
      .insert({
        name: schoolName,
        code: schoolCode,
        type: schoolType,
        director_name: directorName,
        phone: phone,
        address: address,
        city: city,
        country: country,
        available_classes: availableClasses,
        status: 'active',
        director_user_id: authUserId,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()
      .single();

    if (schoolError) {
      console.error('‚ùå Erreur cr√©ation √©cole:', schoolError);
      throw new Error(`Erreur lors de la cr√©ation de l'√©cole: ${schoolError.message}`);
    }

    console.log('‚úÖ √âcole cr√©√©e:', schoolData.id);

    // 6. Mettre √† jour l'utilisateur avec l'ID de l'√©cole
    const { error: updateUserError } = await supabase
      .from('users')
      .update({
        current_school_id: schoolData.id,
        updated_at: new Date().toISOString()
      })
      .eq('id', authUserId);

    if (updateUserError) {
      console.warn('‚ö†Ô∏è Impossible de lier l\'√©cole √† l\'utilisateur:', updateUserError.message);
    }

    // 7. Cr√©er l'ann√©e acad√©mique par d√©faut
    const { data: academicYearData, error: academicYearError } = await supabase
      .from('academic_years')
      .insert({
        school_id: schoolData.id,
        name: '2024-2025',
        start_date: '2024-09-01',
        end_date: '2025-07-31',
        is_current: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()
      .single();

    if (academicYearError) {
      console.warn('‚ö†Ô∏è Impossible de cr√©er l\'ann√©e acad√©mique:', academicYearError.message);
    } else {
      console.log('‚úÖ Ann√©e acad√©mique cr√©√©e:', academicYearData.id);
    }

    // 8. Retourner le r√©sultat
    const result = {
      school: schoolData,
      user: userData,
      academicYear: academicYearData
    };

    console.log('üéâ Service termin√© avec succ√®s !', result);

    return {
      success: true,
      message: '√âcole cr√©√©e et li√©e avec succ√®s',
      data: result
    };

  } catch (error) {
    console.error('‚ùå Erreur dans createPrincipalSchool:', error);
    return {
      success: false,
      message: error.message || 'Erreur lors de la cr√©ation de l\'√©cole',
      data: null
    };
  }
};

/**
 * Service pour r√©cup√©rer les informations d'une √©cole
 */
export const getSchoolByDirector = async (userId) => {
  try {
    const { data: school, error } = await supabase
      .from('schools')
      .select(`
        *,
        director:users!director_user_id(*),
        academic_years!inner(*),
        classes(*),
        students(*),
        teachers(*)
      `)
      .eq('director_user_id', userId)
      .eq('academic_years.is_current', true)
      .single();

    if (error) {
      console.error('Erreur r√©cup√©ration √©cole:', error);
      return null;
    }

    return school;
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration de l\'√©cole:', error);
    throw error;
  }
};

/**
 * Service pour mettre √† jour les informations d'une √©cole
 */
export const updateSchool = async (schoolId, updateData) => {
  try {
    const { data: school, error } = await supabase
      .from('schools')
      .update({
        ...updateData,
        updated_at: new Date().toISOString()
      })
      .eq('id', schoolId)
      .select(`
        *,
        director:users!director_user_id(*),
        academic_years(*)
      `)
      .single();

    if (error) {
      throw error;
    }

    return school;
  } catch (error) {
    console.error('Erreur lors de la mise √† jour de l\'√©cole:', error);
    throw error;
  }
};

/**
 * Service pour r√©cup√©rer les statistiques d'une √©cole
 */
export const getSchoolStats = async (schoolId) => {
  try {
    const [
      { count: studentsCount },
      { count: teachersCount },
      { count: classesCount },
      { count: paymentsCount }
    ] = await Promise.all([
      supabase.from('students').select('*', { count: 'exact' }).eq('school_id', schoolId).eq('is_active', true),
      supabase.from('teachers').select('*', { count: 'exact' }).eq('school_id', schoolId).eq('is_active', true),
      supabase.from('classes').select('*', { count: 'exact' }).eq('school_id', schoolId),
      supabase.from('payments').select('*', { count: 'exact' }).eq('school_id', schoolId).eq('status', 'completed')
    ]);

    return {
      students: studentsCount || 0,
      teachers: teachersCount || 0,
      classes: classesCount || 0,
      payments: paymentsCount || 0
    };
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des statistiques:', error);
    throw error;
  }
};

export default {
  createPrincipalSchool,
  getSchoolByDirector,
  updateSchool,
  getSchoolStats
};