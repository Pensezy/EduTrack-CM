import React, { useState, useEffect } from 'react';
import { Helmet } from 'react-helmet';
import { useLocation, useNavigate } from 'react-router-dom';
import Header from '../../components/ui/Header';
import Sidebar from '../../components/ui/Sidebar';
import NotificationCenter from '../../components/ui/NotificationCenter';
import AccessibilityControls from '../../components/ui/AccessibilityControls';
import MetricCard from './components/MetricCard';
import ClassAverageChart from './components/ClassAverageChart';
import AttendanceChart from './components/AttendanceChart';
import PaymentStatusChart from './components/PaymentStatusChart';
import QuickActions from './components/QuickActions';
import SystemStatus from './components/SystemStatus';
import PersonnelManagement from './components/PersonnelManagement';
import AccountsManagement from './components/AccountsManagement';
import DatabaseDiagnostic from './components/DatabaseDiagnostic';
import SchoolYearValidationTab from './components/SchoolYearValidationTab';
import ErrorBoundary from '../../components/ErrorBoundary';
import Icon from '../../components/AppIcon';
import Button from '../../components/ui/Button';
import useDashboardData from '../../hooks/useDashboardData';

const PrincipalDashboard = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
  const [activeTab, setActiveTab] = useState('overview');
  const [currentTime, setCurrentTime] = useState(new Date());
  const [showMobileMenu, setShowMobileMenu] = useState(false);
  
  // √âtats pour la gestion des classes personnalis√©es
  const [newClassName, setNewClassName] = useState('');
  const [addingClass, setAddingClass] = useState(false);
  const [classError, setClassError] = useState('');
  const [classSuccess, setClassSuccess] = useState('');
  
  // Hook pour les donn√©es avec switch automatique d√©mo/production
  const { 
    data, 
    loading, 
    errors, 
    dataMode, 
    isDemo, 
    isProduction, 
    modeLoading,
    refresh,
    user  // R√©cup√©rer aussi l'utilisateur depuis useDataMode
  } = useDashboardData();

  // R√©cup√©rer les donn√©es de l'√©cole - PRIORIT√â aux vraies donn√©es de la base de donn√©es
  const schoolDataFromDatabase = data.schoolDetails; // Vraies donn√©es depuis Supabase
  const schoolDataFromState = location.state?.school;
  const schoolDataFromUser = user?.schoolData;
  const schoolData = schoolDataFromDatabase || schoolDataFromUser || schoolDataFromState;
  
  useEffect(() => {
    console.log('üèõÔ∏è PrincipalDashboard - √âtat actuel:');
    console.log('  - Mode de donn√©es:', dataMode);
    console.log('  - Est en mode d√©mo:', isDemo);
    console.log('  - Est en mode production:', isProduction);
    console.log('  - Chargement mode:', modeLoading);
    console.log('  - Utilisateur:', user);
    
    if (schoolDataFromDatabase) {
      console.log('‚úÖ Donn√©es √©cole depuis SUPABASE (PRIORIT√â):', schoolDataFromDatabase);
    } else if (schoolDataFromUser) {
      console.log('‚úÖ Donn√©es √©cole depuis useDataMode (FALLBACK 1):', schoolDataFromUser);
    } else if (schoolDataFromState) {
      console.log('‚úÖ Donn√©es √©cole depuis location.state (FALLBACK 2):', schoolDataFromState);
    } else {
      console.log('‚ùå Aucune donn√©e √©cole disponible');
    }
    
    if (schoolData) {
      console.log('üè´ √âcole active:', schoolData.name);
      console.log('üéì Type:', schoolData.type);
      console.log('üìö Classes disponibles:', schoolData.available_classes);
      console.log('üìä Statut:', schoolData.status);
      console.log('üë§ Directeur ID:', schoolData.director_id);
    }
  }, [schoolData, dataMode, isDemo, isProduction, modeLoading, user]);

  // G√©rer les param√®tres URL pour la navigation directe vers un onglet
  useEffect(() => {
    const urlParams = new URLSearchParams(location.search);
    const tabParam = urlParams.get('tab');
    if (tabParam && ['overview', 'analytics', 'personnel', 'school-year', 'school-info', 'actions', 'system', 'accounts', 'debug'].includes(tabParam)) {
      setActiveTab(tabParam);
    } else {
      setActiveTab('overview'); // Par d√©faut si pas de param√®tre ou param√®tre invalide
    }
  }, [location.search]); // Se d√©clenche √† chaque changement d'URL

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  // Fermeture du menu mobile au clic √† l'ext√©rieur
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (!event.target.closest('[data-mobile-menu]')) {
        setShowMobileMenu(false);
      }
    };

    if (showMobileMenu) {
      document.addEventListener('click', handleClickOutside);
      return () => document.removeEventListener('click', handleClickOutside);
    }
  }, [showMobileMenu]);

  const toggleSidebar = () => {
    setIsSidebarCollapsed(!isSidebarCollapsed);
  };

  const handleTabChange = (tabId) => {
    if (tabId === 'overview') {
      navigate('/principal-dashboard');
    } else {
      navigate(`/principal-dashboard?tab=${tabId}`);
    }
  };

  // Les m√©triques proviennent maintenant du hook qui switch automatiquement
  const keyMetrics = data.metrics || [];

    const tabOptions = [
    { id: 'overview', label: 'Vue d\'ensemble', icon: 'BarChart3' },
    { id: 'analytics', label: 'Analyses', icon: 'TrendingUp' },
    { id: 'personnel', label: 'Personnel', icon: 'Users' },
    { id: 'school-year', label: 'Validation Ann√©e', icon: 'Calendar' },
    { id: 'school-info', label: '√âcole', icon: 'School' },
    { id: 'actions', label: 'Actions', icon: 'Zap' },
    { id: 'system', label: 'Syst√®me', icon: 'Settings' },
    { id: 'accounts', label: 'Comptes', icon: 'UserCheck' },
    { id: 'debug', label: 'Debug DB', icon: 'Bug' }
  ];

  const formatDateTime = (date) => {
    return date?.toLocaleDateString('fr-FR', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Fonction g√©n√©rique pour ajouter une classe
  const handleAddClass = async (className) => {
    const classNameTrimmed = className.trim();
    
    // Validation
    if (!classNameTrimmed) {
      setClassError('Nom de classe invalide');
      return false;
    }
    
    // V√©rifier si la classe existe d√©j√†
    const currentClasses = schoolData?.available_classes || [];
    if (currentClasses.includes(classNameTrimmed)) {
      setClassError('Cette classe existe d√©j√† dans votre √©tablissement');
      return false;
    }
    
    setAddingClass(true);
    setClassError('');
    setClassSuccess('');
    
    try {
      // Importer supabase pour la mise √† jour
      const { supabase } = await import('../../lib/supabase');
      
      // Ajouter la nouvelle classe au tableau existant
      const updatedClasses = [...currentClasses, classNameTrimmed];
      
      // Mettre √† jour en base de donn√©es
      const { error } = await supabase
        .from('schools')
        .update({ available_classes: updatedClasses })
        .eq('id', schoolData.id);
      
      if (error) {
        throw error;
      }
      
      // Succ√®s
      setClassSuccess(`Classe "${classNameTrimmed}" ajout√©e avec succ√®s !`);
      
      // Recharger les donn√©es pour mettre √† jour l'affichage
      setTimeout(() => {
        refresh();
        setClassSuccess('');
      }, 2000);
      
      return true;
      
    } catch (error) {
      console.error('Erreur lors de l\'ajout de la classe:', error);
      setClassError('Erreur lors de l\'ajout de la classe. Veuillez r√©essayer.');
      return false;
    } finally {
      setAddingClass(false);
    }
  };

  // Fonction pour ajouter une classe personnalis√©e
  const handleAddCustomClass = async () => {
    const className = newClassName.trim();
    
    // Validations sp√©cifiques √† la saisie personnalis√©e
    if (!className) {
      setClassError('Veuillez saisir un nom de classe');
      return;
    }
    
    if (className.length < 2) {
      setClassError('Le nom de classe doit contenir au moins 2 caract√®res');
      return;
    }
    
    if (className.length > 50) {
      setClassError('Le nom de classe ne peut pas d√©passer 50 caract√®res');
      return;
    }
    
    // Utiliser la fonction g√©n√©rique pour ajouter la classe
    const success = await handleAddClass(className);
    if (success) {
      setNewClassName('');
    }
  };

  const renderTabContent = () => {
    switch (activeTab) {
      case 'overview':
        return (
          <div className="space-y-4 sm:space-y-6 lg:space-y-8">
            {/* Key Metrics - Responsive et prioritaires */}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3 sm:gap-4 lg:gap-6">
              {keyMetrics?.slice(0, 4).map((metric, index) => (
                <MetricCard
                  key={index}
                  title={metric?.title}
                  value={metric?.value}
                  change={metric?.change}
                  changeType={metric?.changeType}
                  icon={metric?.icon}
                  description={metric?.description}
                  trend={metric?.trend}
                />
              ))}
            </div>
            
            {/* Charts Section - Responsive */}
            <div className="bg-white rounded-xl border border-gray-200 p-4 sm:p-6">
              <h3 className="text-base sm:text-lg font-semibold text-gray-900 mb-4 sm:mb-6">Aper√ßu des performances</h3>
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 lg:gap-8">
                <div className="min-h-[200px] sm:min-h-[250px]">
                  <ClassAverageChart />
                </div>
                <div className="min-h-[200px] sm:min-h-[250px]">
                  <AttendanceChart />
                </div>
              </div>
            </div>
            
            {/* Payment Status - Compact et responsive */}
            <div className="bg-white rounded-xl border border-gray-200 p-4 sm:p-6">
              <h3 className="text-base sm:text-lg font-semibold text-gray-900 mb-3 sm:mb-4">√âtat des paiements</h3>
              <div className="min-h-[150px] sm:min-h-[200px]">
                <PaymentStatusChart />
              </div>
            </div>
          </div>
        );
      case 'analytics':
        return (
          <div className="space-y-4 sm:space-y-6 lg:space-y-8">
            {/* Header Section - Responsive */}
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-4 sm:p-6 border border-blue-100">
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 sm:w-12 sm:h-12 bg-blue-100 rounded-xl flex items-center justify-center flex-shrink-0">
                  <Icon name="TrendingUp" size={20} className="text-blue-600 sm:size-6" />
                </div>
                <div className="min-w-0">
                  <h2 className="text-lg sm:text-xl font-bold text-gray-900">
                    Analyses D√©taill√©es
                  </h2>
                  <p className="text-sm sm:text-base text-gray-600">
                    Rapports et tendances de performance
                  </p>
                </div>
              </div>
            </div>
            
            {/* Charts Grid - Responsive */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 lg:gap-8">
              <div className="bg-white rounded-xl border border-gray-200 p-4 sm:p-6">
                <div className="min-h-[250px] sm:min-h-[300px]">
                  <ClassAverageChart />
                </div>
              </div>
              <div className="bg-white rounded-xl border border-gray-200 p-4 sm:p-6">
                <div className="min-h-[250px] sm:min-h-[300px]">
                  <AttendanceChart />
                </div>
              </div>
            </div>
            
            {/* Payment Analytics - Responsive */}
            <div className="bg-white rounded-xl border border-gray-200 p-4 sm:p-6">
              <div className="min-h-[200px] sm:min-h-[250px]">
                <PaymentStatusChart />
              </div>
            </div>
          </div>
        );
      case 'personnel':
        return <PersonnelManagement />;
      case 'school-year':
        return <SchoolYearValidationTab />;
      case 'actions':
        return (
          <div className="space-y-4 sm:space-y-6">
            {/* Raccourcis directs - Responsifs */}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4">
              <button
                onClick={() => navigate('/principal-dashboard?tab=accounts&subtab=create')}
                className="p-3 sm:p-4 bg-blue-50 hover:bg-blue-100 border border-blue-200 hover:border-blue-300 rounded-xl transition-all duration-200 text-left group"
              >
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 sm:w-10 sm:h-10 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">
                    <Icon name="UserPlus" size={16} className="text-blue-600 sm:size-5" />
                  </div>
                  <div className="min-w-0">
                    <h3 className="font-semibold text-blue-900 text-sm sm:text-base">Cr√©er Personnel</h3>
                    <p className="text-xs sm:text-sm text-blue-700 truncate">Ajouter enseignant/secr√©taire</p>
                  </div>
                </div>
              </button>
              
              <button
                onClick={() => navigate('/notification-management')}
                className="p-3 sm:p-4 bg-green-50 hover:bg-green-100 border border-green-200 hover:border-green-300 rounded-xl transition-all duration-200 text-left group"
              >
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 sm:w-10 sm:h-10 bg-green-100 rounded-lg flex items-center justify-center flex-shrink-0">
                    <Icon name="Bell" size={16} className="text-green-600 sm:size-5" />
                  </div>
                  <div className="min-w-0">
                    <h3 className="font-semibold text-green-900 text-sm sm:text-base">Notification</h3>
                    <p className="text-xs sm:text-sm text-green-700 truncate">Message √† l'√©cole</p>
                  </div>
                </div>
              </button>
              
              <button
                onClick={() => navigate('/report-generation')}
                className="p-3 sm:p-4 bg-purple-50 hover:bg-purple-100 border border-purple-200 hover:border-purple-300 rounded-xl transition-all duration-200 text-left group sm:col-span-2 lg:col-span-1"
              >
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 sm:w-10 sm:h-10 bg-purple-100 rounded-lg flex items-center justify-center flex-shrink-0">
                    <Icon name="FileBarChart" size={16} className="text-purple-600 sm:size-5" />
                  </div>
                  <div className="min-w-0">
                    <h3 className="font-semibold text-purple-900 text-sm sm:text-base">Rapport</h3>
                    <p className="text-xs sm:text-sm text-purple-700 truncate">G√©n√©rer analyse</p>
                  </div>
                </div>
              </button>
            </div>
            
            {/* Section compl√®te - Responsive */}
            <div className="bg-white rounded-xl border border-gray-200 p-4 sm:p-6">
              <h3 className="text-base sm:text-lg font-semibold text-gray-900 mb-4 sm:mb-6">Toutes les Actions</h3>
              <QuickActions />
            </div>
          </div>
        );
      case 'system':
        return (
          <div className="bg-white rounded-xl border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-6">√âtat du Syst√®me</h3>
            <SystemStatus />
          </div>
        );
      case 'accounts':
        return <AccountsManagement />;
      case 'school-info':
        return (
          <div className="space-y-6">
            {/* Informations g√©n√©rales de l'√©cole */}
            <div className="bg-white rounded-xl border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-6">üèõÔ∏è Informations de l'√âtablissement</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">üè´</div>
                    <div>
                      <div className="text-sm text-gray-500">Nom de l'√©tablissement</div>
                      <div className="font-medium">{schoolData?.name || 'Non d√©fini'}</div>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">üéì</div>
                    <div>
                      <div className="text-sm text-gray-500">Type d'√©tablissement</div>
                      <div className="font-medium">{schoolData?.type || 'Non d√©fini'}</div>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center">üìç</div>
                    <div>
                      <div className="text-sm text-gray-500">Adresse</div>
                      <div className="font-medium">{schoolData?.address || 'Non d√©finie'}</div>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-orange-100 rounded-lg flex items-center justify-center">üåç</div>
                    <div>
                      <div className="text-sm text-gray-500">Localisation</div>
                      <div className="font-medium">{schoolData?.city ? `${schoolData.city}, ${schoolData.country || ''}` : 'Non d√©finie'}</div>
                    </div>
                  </div>
                </div>
                
                <div className="space-y-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-indigo-100 rounded-lg flex items-center justify-center">üë§</div>
                    <div>
                      <div className="text-sm text-gray-500">Directeur</div>
                      <div className="font-medium">{schoolData?.director_name || schoolData?.users?.full_name || 'Non d√©fini'}</div>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center">üìû</div>
                    <div>
                      <div className="text-sm text-gray-500">T√©l√©phone</div>
                      <div className="font-medium">{schoolData?.phone || 'Non d√©fini'}</div>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center">üî¢</div>
                    <div>
                      <div className="text-sm text-gray-500">Code √©tablissement</div>
                      <div className="font-medium">{schoolData?.code || 'Non d√©fini'}</div>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-teal-100 rounded-lg flex items-center justify-center">‚ö°</div>
                    <div>
                      <div className="text-sm text-gray-500">Statut</div>
                      <div className={`font-medium px-2 py-1 rounded text-xs inline-block ${
                        schoolData?.status === 'active' ? 'bg-green-100 text-green-800' :
                        schoolData?.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        {schoolData?.status === 'active' ? '‚úÖ Actif' :
                         schoolData?.status === 'pending' ? '‚è≥ En attente' :
                         schoolData?.status || 'Non d√©fini'}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            {/* Gestion intelligente des classes */}
            <div className="bg-white rounded-xl border border-gray-200 p-6">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-lg font-semibold text-gray-900">üìö Classes de l'√âcole</h3>
                <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm">
                  + Ajouter une classe
                </button>
              </div>
              
              {/* Classes actives de l'√©cole */}
              {schoolData?.available_classes && schoolData.available_classes.length > 0 ? (
                <div className="mb-6">
                  <h4 className="text-md font-medium text-gray-700 mb-3">
                    üéØ Vos Classes Actives ({schoolData.available_classes.length})
                  </h4>
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
                    {schoolData.available_classes.map((classe, index) => (
                      <div key={index} className="bg-green-50 border border-green-200 rounded-lg p-4 text-center hover:bg-green-100 transition-colors cursor-pointer">
                        <div className="text-green-800 font-semibold text-lg">{classe}</div>
                        <div className="text-xs text-green-600 mt-1">Pr√™te √† utiliser</div>
                        <div className="mt-2 flex justify-center space-x-1">
                          <button className="p-1 text-green-600 hover:bg-green-200 rounded">
                            <Icon name="Users" size={14} />
                          </button>
                          <button className="p-1 text-green-600 hover:bg-green-200 rounded">
                            <Icon name="Settings" size={14} />
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ) : (
                <div className="mb-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <div className="text-center text-yellow-700">
                    <Icon name="AlertTriangle" size={24} className="mx-auto mb-2" />
                    <div className="font-medium">Aucune classe active</div>
                    <div className="text-sm">Configurez vos classes pour commencer</div>
                  </div>
                </div>
              )}

              {/* Suggestions de classes selon le type d'√©tablissement */}
              {schoolData?.type && (
                <div className="mb-6">
                  <h4 className="text-md font-medium text-gray-700 mb-3 flex items-center">
                    üí° Classes Sugg√©r√©es pour votre {schoolData.type}
                    <span className="ml-2 text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded">
                      {schoolData.type}
                    </span>
                  </h4>
                  
                  {(() => {
                    const currentClasses = schoolData.available_classes || [];
                    let suggestions = [];
                    let levelDescription = '';
                    
                    // Suggestions STRICTEMENT selon le type d'√©tablissement
                    const schoolType = schoolData.type?.toLowerCase().trim();
                    
                    if (schoolType === 'primaire' || schoolType === '√©cole primaire') {
                      levelDescription = 'Cycle primaire (6-11 ans)';
                      suggestions = [
                        'CP', 'CE1', 'CE2', 'CM1', 'CM2',
                        'CP A', 'CP B', 'CE1 A', 'CE1 B', 'CE2 A', 'CE2 B',
                        'CM1 A', 'CM1 B', 'CM2 A', 'CM2 B'
                      ];
                    } 
                    else if (schoolType === 'coll√®ge' || schoolType === 'college' || schoolType === 'coll√®ge d\'enseignement g√©n√©ral') {
                      levelDescription = 'Cycle secondaire 1er degr√© (11-15 ans)';
                      suggestions = [
                        '6√®me', '5√®me', '4√®me', '3√®me',
                        '6√®me A', '6√®me B', '6√®me C', 
                        '5√®me A', '5√®me B', '5√®me C',
                        '4√®me A', '4√®me B', '4√®me C',
                        '3√®me A', '3√®me B', '3√®me C'
                      ];
                    }
                    else if (schoolType === 'lyc√©e' || schoolType === 'lycee' || schoolType === 'lyc√©e d\'enseignement g√©n√©ral') {
                      levelDescription = 'Cycle secondaire 2nd degr√© (15-18 ans)';
                      suggestions = [
                        '2nde', '1√®re', 'Terminale',
                        '2nde A', '2nde C', '2nde D',
                        '1√®re A', '1√®re C', '1√®re D', '1√®re L', '1√®re S',
                        'Terminale A', 'Terminale C', 'Terminale D', 'Terminale L', 'Terminale S', 'Terminale Ti'
                      ];
                    }
                    else if (schoolType.includes('technique') || schoolType.includes('professionnel') || schoolType === 'lyc√©e technique') {
                      levelDescription = 'Enseignement technique et professionnel';
                      suggestions = [
                        'CAP 1√®re ann√©e', 'CAP 2√®me ann√©e',
                        'BEP 1√®re ann√©e', 'BEP 2√®me ann√©e',
                        'BAC Pro 1√®re', 'BAC Pro 2√®me', 'BAC Pro Terminale',
                        'BTS 1√®re ann√©e', 'BTS 2√®me ann√©e',
                        'CAP √âlectricit√©', 'CAP M√©canique', 'CAP Menuiserie', 'CAP Couture',
                        'BEP √âlectronique', 'BEP Informatique', 'BEP Comptabilit√©',
                        'BAC Pro √âlectricit√©', 'BAC Pro M√©canique Auto', 'BAC Pro Secr√©tariat'
                      ];
                    }
                    else if (schoolType.includes('maternelle') || schoolType === '√©cole maternelle') {
                      levelDescription = 'Cycle pr√©scolaire (3-6 ans)';
                      suggestions = [
                        'Petite Section', 'Moyenne Section', 'Grande Section',
                        'PS A', 'PS B', 'MS A', 'MS B', 'GS A', 'GS B'
                      ];
                    }
                    else if (schoolType.includes('sup√©rieur') || schoolType.includes('universit√©') || schoolType.includes('institut')) {
                      levelDescription = 'Enseignement sup√©rieur';
                      suggestions = [
                        'Licence 1', 'Licence 2', 'Licence 3',
                        'Master 1', 'Master 2',
                        'L1 Informatique', 'L1 Math√©matiques', 'L1 √âconomie',
                        'L2 Informatique', 'L2 Math√©matiques', 'L2 √âconomie',
                        'L3 Informatique', 'L3 Math√©matiques', 'L3 √âconomie'
                      ];
                    }
                    else {
                      // Type d'√©tablissement non reconnu - suggestions g√©n√©riques appropri√©es
                      levelDescription = 'Classes g√©n√©rales';
                      suggestions = [
                        '6√®me', '5√®me', '4√®me', '3√®me', '2nde', '1√®re', 'Terminale'
                      ];
                    }
                    
                    // Filtrer les classes d√©j√† pr√©sentes
                    const availableSuggestions = suggestions.filter(
                      suggestion => !currentClasses.includes(suggestion)
                    );
                    
                    return (
                      <div>
                        <div className="mb-3 text-xs text-gray-600 italic">
                          {levelDescription}
                        </div>
                        {availableSuggestions.length > 0 ? (
                          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
                            {availableSuggestions.slice(0, 12).map((suggestion, index) => (
                              <div key={index} className="bg-blue-50 border border-blue-200 rounded-lg p-3 text-center hover:bg-blue-100 transition-colors cursor-pointer group">
                                <div className="text-blue-800 font-medium">{suggestion}</div>
                                <div className="text-xs text-blue-600 mt-1">Appropri√©e</div>
                                <div className="mt-2 opacity-0 group-hover:opacity-100 transition-opacity">
                                  <button 
                                    onClick={() => handleAddClass(suggestion)}
                                    disabled={addingClass}
                                    className="px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 disabled:bg-blue-400 disabled:cursor-not-allowed"
                                  >
                                    + Ajouter
                                  </button>
                                </div>
                              </div>
                            ))}
                          </div>
                        ) : (
                          <div className="text-center text-gray-500 py-4">
                            <Icon name="CheckCircle" size={20} className="mx-auto mb-2 text-green-500" />
                            <div className="text-sm">Toutes les classes appropri√©es pour un {schoolData.type} sont configur√©es !</div>
                          </div>
                        )}
                      </div>
                    );
                  })()}
                </div>
              )}

              {/* Option pour cr√©er une classe personnalis√©e */}
              <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                <h4 className="text-md font-medium text-gray-700 mb-3">üé® Classe Personnalis√©e</h4>
                <div className="flex items-center space-x-3">
                  <input
                    type="text"
                    placeholder="Ex: Ti, 1√®re Anglophone, BTS Comptabilit√©..."
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    value={newClassName}
                    onChange={(e) => setNewClassName(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleAddCustomClass()}
                  />
                  <button 
                    onClick={handleAddCustomClass}
                    disabled={!newClassName.trim() || addingClass}
                    className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center space-x-2"
                  >
                    {addingClass ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                        <span>Ajout...</span>
                      </>
                    ) : (
                      <span>Cr√©er</span>
                    )}
                  </button>
                </div>
                <div className="text-xs text-gray-500 mt-2">
                  Cr√©ez des classes avec des noms sp√©cifiques √† votre √©tablissement
                </div>
                {classError && (
                  <div className="mt-2 text-xs text-red-600 bg-red-50 border border-red-200 rounded px-2 py-1">
                    {classError}
                  </div>
                )}
                {classSuccess && (
                  <div className="mt-2 text-xs text-green-600 bg-green-50 border border-green-200 rounded px-2 py-1">
                    {classSuccess}
                  </div>
                )}
              </div>
            </div>
            
            {/* Statistiques rapides */}
            <div className="bg-white rounded-xl border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-6">üìä Aper√ßu Rapide</h3>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div className="bg-gradient-to-r from-blue-50 to-blue-100 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-blue-800">
                    {keyMetrics.find(m => m.title === '√âl√®ves')?.value || 0}
                  </div>
                  <div className="text-sm text-blue-600">√âl√®ves inscrits</div>
                </div>
                <div className="bg-gradient-to-r from-green-50 to-green-100 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-green-800">
                    {data?.schoolStats?.teachers || 0}
                  </div>
                  <div className="text-sm text-green-600">Enseignants</div>
                </div>
                <div className="bg-gradient-to-r from-purple-50 to-purple-100 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-purple-800">
                    {schoolData?.available_classes?.length || 0}
                  </div>
                  <div className="text-sm text-purple-600">Classes actives</div>
                </div>
                <div className="bg-gradient-to-r from-orange-50 to-orange-100 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-orange-800">
                    {(() => {
                      const schoolType = schoolData?.type?.toLowerCase().trim();
                      const currentClasses = schoolData?.available_classes || [];
                      let suggestions = [];
                      
                      // M√™me logique que dans la section suggestions
                      if (schoolType === 'primaire' || schoolType === '√©cole primaire') {
                        suggestions = [
                          'CP', 'CE1', 'CE2', 'CM1', 'CM2',
                          'CP A', 'CP B', 'CE1 A', 'CE1 B', 'CE2 A', 'CE2 B',
                          'CM1 A', 'CM1 B', 'CM2 A', 'CM2 B'
                        ];
                      } else if (schoolType === 'coll√®ge' || schoolType === 'college') {
                        suggestions = [
                          '6√®me', '5√®me', '4√®me', '3√®me',
                          '6√®me A', '6√®me B', '6√®me C', 
                          '5√®me A', '5√®me B', '5√®me C',
                          '4√®me A', '4√®me B', '4√®me C',
                          '3√®me A', '3√®me B', '3√®me C'
                        ];
                      } else if (schoolType === 'lyc√©e' || schoolType === 'lycee') {
                        suggestions = [
                          '2nde', '1√®re', 'Terminale',
                          '2nde A', '2nde C', '2nde D',
                          '1√®re A', '1√®re C', '1√®re D', '1√®re L', '1√®re S',
                          'Terminale A', 'Terminale C', 'Terminale D', 'Terminale L', 'Terminale S', 'Terminale Ti'
                        ];
                      } else if (schoolType?.includes('technique') || schoolType?.includes('professionnel')) {
                        suggestions = [
                          'CAP 1√®re ann√©e', 'CAP 2√®me ann√©e',
                          'BEP 1√®re ann√©e', 'BEP 2√®me ann√©e',
                          'BAC Pro 1√®re', 'BAC Pro 2√®me', 'BAC Pro Terminale',
                          'BTS 1√®re ann√©e', 'BTS 2√®me ann√©e',
                          'CAP √âlectricit√©', 'CAP M√©canique', 'CAP Menuiserie', 'CAP Couture',
                          'BEP √âlectronique', 'BEP Informatique', 'BEP Comptabilit√©',
                          'BAC Pro √âlectricit√©', 'BAC Pro M√©canique Auto', 'BAC Pro Secr√©tariat'
                        ];
                      } else if (schoolType?.includes('maternelle')) {
                        suggestions = [
                          'Petite Section', 'Moyenne Section', 'Grande Section',
                          'PS A', 'PS B', 'MS A', 'MS B', 'GS A', 'GS B'
                        ];
                      } else if (schoolType?.includes('sup√©rieur') || schoolType?.includes('universit√©')) {
                        suggestions = [
                          'Licence 1', 'Licence 2', 'Licence 3',
                          'Master 1', 'Master 2',
                          'L1 Informatique', 'L1 Math√©matiques', 'L1 √âconomie',
                          'L2 Informatique', 'L2 Math√©matiques', 'L2 √âconomie',
                          'L3 Informatique', 'L3 Math√©matiques', 'L3 √âconomie'
                        ];
                      } else {
                        suggestions = [
                          '6√®me', '5√®me', '4√®me', '3√®me', '2nde', '1√®re', 'Terminale'
                        ];
                      }
                      
                      // Filtrer les suggestions qui ne sont pas d√©j√† dans les classes actuelles
                      const availableSuggestions = suggestions.filter(
                        suggestion => !currentClasses.includes(suggestion)
                      );
                      
                      return availableSuggestions.length;
                    })()}
                  </div>
                  <div className="text-sm text-orange-600">Classes sugg√©r√©es</div>
                </div>
              </div>
            </div>
          </div>
        );
      case 'debug':
        return (
          <div className="space-y-6">
            {/* Debug du mode de donn√©es */}
            <div className="bg-white rounded-xl border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-6">üîç Debug Mode de Donn√©es</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div className="space-y-2">
                  <div><strong>Mode actuel:</strong> <span className={`px-2 py-1 rounded ${dataMode === 'production' ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'}`}>{dataMode}</span></div>
                  <div><strong>Est d√©mo:</strong> {isDemo ? '‚úÖ Oui' : '‚ùå Non'}</div>
                  <div><strong>Est production:</strong> {isProduction ? '‚úÖ Oui' : '‚ùå Non'}</div>
                  <div><strong>Chargement mode:</strong> {modeLoading ? '‚è≥ En cours' : '‚úÖ Termin√©'}</div>
                </div>
                <div className="space-y-2">
                  <div><strong>Utilisateur connect√©:</strong> {user ? '‚úÖ Oui' : '‚ùå Non'}</div>
                  <div><strong>Email:</strong> {user?.email || 'N/A'}</div>
                  <div><strong>ID utilisateur:</strong> {user?.id || 'N/A'}</div>
                  <div><strong>√âcole d√©tect√©e:</strong> {user?.schoolData ? '‚úÖ Oui' : '‚ùå Non'}</div>
                </div>
              </div>
              
              {user?.schoolData && (
                <div className="mt-4 p-3 bg-green-50 border border-green-200 rounded">
                  <h4 className="font-medium text-green-900 mb-2">üìä Donn√©es √âcole (useDataMode)</h4>
                  <div className="text-sm text-green-800 space-y-1">
                    <div><strong>Nom:</strong> {user.schoolData.name}</div>
                    <div><strong>ID:</strong> {user.schoolData.id}</div>
                    <div><strong>Type:</strong> {user.schoolData.type || 'Non d√©fini'}</div>
                    <div><strong>Statut:</strong> {user.schoolData.status}</div>
                    <div><strong>Adresse:</strong> {user.schoolData.address || 'Non d√©finie'}</div>
                    <div><strong>Ville:</strong> {user.schoolData.city || 'Non d√©finie'}</div>
                    <div><strong>Pays:</strong> {user.schoolData.country || 'Non d√©fini'}</div>
                    <div><strong>Classes:</strong> {user.schoolData.available_classes ? user.schoolData.available_classes.join(', ') : 'Non d√©finies'}</div>
                    <div><strong>Code √©cole:</strong> {user.schoolData.code || 'Non d√©fini'}</div>
                    <div><strong>Directeur ID:</strong> {user.schoolData.director_id}</div>
                  </div>
                </div>
              )}
              
              {schoolDataFromState && (
                <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded">
                  <h4 className="font-medium text-blue-900 mb-2">üìä Donn√©es √âcole (location.state)</h4>
                  <div className="text-sm text-blue-800 space-y-1">
                    <div><strong>Nom:</strong> {schoolDataFromState.name}</div>
                    <div><strong>ID:</strong> {schoolDataFromState.id}</div>
                    <div><strong>Statut:</strong> {schoolDataFromState.status}</div>
                  </div>
                </div>
              )}
            </div>
            
            {/* Debug de la base de donn√©es */}
            <div className="bg-white rounded-xl border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-6">Diagnostic de la Base de Donn√©es</h3>
              <DatabaseDiagnostic />
            </div>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <>
      <Helmet>
        <title>Tableau de bord Principal - EduTrack CM</title>
        <meta name="description" content="Tableau de bord principal pour la supervision et l'administration de l'√©cole avec analyses en temps r√©el" />
      </Helmet>
      <div className="min-h-screen bg-background">
        {/* Header */}
        <Header
          userRole="principal"
          userName={
            schoolData?.director_name || 
            schoolData?.directorName || 
            schoolData?.users?.full_name ||
            user?.schoolData?.users?.full_name ||
            user?.full_name ||
            user?.email?.split('@')[0] || 
            'Directeur'
          }
          isCollapsed={isSidebarCollapsed}
          onToggleSidebar={toggleSidebar}
        />

        {/* Sidebar */}
        <Sidebar
          userRole="principal"
          isCollapsed={isSidebarCollapsed}
          onToggle={toggleSidebar}
        />

        {/* Main Content */}
        <main className={`pt-16 transition-all duration-300 ${
          isSidebarCollapsed ? 'lg:pl-20' : 'lg:pl-64'
        } overflow-x-hidden min-h-screen`}>
          <div className="p-3 sm:p-4 lg:p-6 w-full">
            <div className="max-w-full w-full overflow-x-auto">
            {/* Page Header - Simplifi√© et responsive */}
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-4 sm:p-6 mb-4 sm:mb-6 border border-blue-100">
              <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
                <div className="flex items-center space-x-3 sm:space-x-4">
                  <div className="w-10 h-10 sm:w-12 sm:h-12 bg-blue-100 rounded-xl flex items-center justify-center flex-shrink-0">
                    <Icon name="BarChart3" size={20} className="text-blue-600 sm:size-6" />
                  </div>
                  <div className="min-w-0 flex-1">
                    <div className="flex flex-col sm:flex-row sm:items-center gap-1 sm:gap-3 mb-1">
                      <h1 className="text-lg sm:text-xl lg:text-2xl font-bold text-gray-900 truncate">
                        Dashboard Principal
                      </h1>
                      {/* Indicateur de mode - simplifi√© */}
                      <div className={`self-start px-2 py-1 rounded-full text-xs font-medium ${
                        isDemo 
                          ? 'bg-amber-100 text-amber-800' 
                          : 'bg-green-100 text-green-800'
                      }`}>
                        {isDemo ? 'üîÑ D√©mo' : 'üè´ R√©el'}
                      </div>
                    </div>
                    <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-4 text-xs sm:text-sm text-gray-600">
                      {/* Nom de l'√©cole - priorit√© sur mobile */}
                      {schoolData && (
                        <span className="font-medium text-blue-600 truncate">
                          üèõÔ∏è {schoolData.name}
                        </span>
                      )}
                      {/* Directeur - masqu√© sur tr√®s petits √©crans */}
                      {(schoolData?.director_name || schoolData?.directorName || schoolData?.users?.full_name) && (
                        <div className="hidden sm:block text-green-600 font-medium truncate">
                          üë§ {schoolData.director_name || schoolData.directorName || schoolData.users?.full_name}
                        </div>
                      )}
                      {/* Date - masqu√©e sur mobile */}
                      <span className="hidden md:block">
                        üìÖ {new Date().toLocaleDateString('fr-FR', { 
                          weekday: 'short', 
                          day: 'numeric', 
                          month: 'short' 
                        })}
                      </span>
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center justify-between lg:justify-end space-x-2 sm:space-x-3">
                  {/* Statistiques rapides - responsive */}
                  <div className="hidden sm:flex items-center space-x-2 bg-white/60 backdrop-blur-sm rounded-lg px-2 py-1 sm:px-3 sm:py-2">
                    <Icon name="Users" size={14} className="text-blue-600" />
                    <span className="text-xs sm:text-sm font-medium text-gray-700">
                      {data.schoolStats?.totalStudents || (isDemo ? '400' : '0')}
                    </span>
                  </div>
                  
                  {/* Statut syst√®me - simplifi√© */}
                  <div className="flex items-center space-x-1 sm:space-x-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                    <span className="text-xs text-gray-600 hidden sm:inline">OK</span>
                  </div>
                  
                  <NotificationCenter userRole="principal" />
                  <AccessibilityControls />
                </div>
              </div>
            </div>

            {/* Tab Navigation - Version desktop */}
            <div className="mb-6 sm:mb-8 hidden sm:block">
              <div className="bg-gray-100 p-1 rounded-lg overflow-x-auto scrollbar-hide w-full">
                <div className="flex space-x-1 min-w-max pb-1">
                  {tabOptions?.map((tab) => {
                    // Ajouter des indicateurs contextuels
                    const getTabBadge = (tabId) => {
                      switch (tabId) {
                        case 'personnel':
                          return <div className="w-2 h-2 bg-green-500 rounded-full ml-1 flex-shrink-0" title="25 membres actifs" />;
                        case 'system':
                          return <div className="w-2 h-2 bg-yellow-500 rounded-full ml-1 flex-shrink-0" title="1 alerte mineure" />;
                        case 'school-year':
                          return <div className="w-2 h-2 bg-warning rounded-full ml-1 flex-shrink-0" title="3 demandes en attente" />;
                        default:
                          return null;
                      }
                    };
                    
                    return (
                      <button
                        key={tab?.id}
                        onClick={() => handleTabChange(tab?.id)}
                        className={`flex items-center space-x-2 px-3 lg:px-4 py-2 text-sm rounded-md transition-all duration-200 relative whitespace-nowrap flex-shrink-0 ${
                          activeTab === tab?.id
                            ? 'bg-white text-blue-600 shadow-sm font-medium' 
                            : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                        }`}
                      >
                        <Icon name={tab?.icon} size={16} className="flex-shrink-0" />
                        <span className={`transition-all duration-200 ${
                          !isSidebarCollapsed ? 'text-xs lg:text-sm' : 'text-sm'
                        }`}>
                          {!isSidebarCollapsed && tab?.label.length > 12 
                            ? tab?.label.split(' ').map(word => word.substring(0, 4)).join(' ')
                            : tab?.label
                          }
                        </span>
                        {getTabBadge(tab?.id)}
                      </button>
                    );
                  })}
                </div>
              </div>
            </div>

            {/* Tab Navigation - Version mobile avec dropdown */}
            <div className="mb-6 sm:hidden">
              <div className="relative" data-mobile-menu>
                <button
                  onClick={() => setShowMobileMenu(!showMobileMenu)}
                  className={`w-full flex items-center justify-between px-4 py-3 bg-gray-100 rounded-lg text-sm font-medium ${
                    activeTab ? 'text-blue-600' : 'text-gray-600'
                  }`}
                >
                  <div className="flex items-center space-x-2">
                    <Icon name={tabOptions?.find(t => t.id === activeTab)?.icon} size={16} />
                    <span>{tabOptions?.find(t => t.id === activeTab)?.label}</span>
                    {/* Indicateur d'alertes */}
                    {((activeTab === 'personnel' && true) || 
                      (activeTab === 'system' && true) || 
                      (activeTab === 'school-year' && true)) && (
                      <div className="w-2 h-2 bg-warning rounded-full"></div>
                    )}
                  </div>
                  <Icon 
                    name={showMobileMenu ? "ChevronUp" : "ChevronDown"} 
                    size={16} 
                    className="text-gray-400"
                  />
                </button>
                
                {showMobileMenu && (
                  <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-50">
                    <div className="py-1">
                      {tabOptions?.map((tab) => {
                        const hasAlert = (tab.id === 'personnel') || (tab.id === 'system') || (tab.id === 'school-year');
                        
                        return (
                          <button
                            key={tab?.id}
                            onClick={() => {
                              handleTabChange(tab?.id);
                              setShowMobileMenu(false);
                            }}
                            className={`w-full flex items-center justify-between px-4 py-3 text-sm transition-colors ${
                              activeTab === tab?.id
                                ? 'bg-blue-50 text-blue-600 font-medium' 
                                : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
                            }`}
                          >
                            <div className="flex items-center space-x-3">
                              <Icon name={tab?.icon} size={16} className="flex-shrink-0" />
                              <span>{tab?.label}</span>
                            </div>
                            {hasAlert && (
                              <div className="w-2 h-2 bg-warning rounded-full flex-shrink-0"></div>
                            )}
                          </button>
                        );
                      })}
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Notification mode d√©mo - Compacte */}
            {isDemo && (
              <div className="mb-4 sm:mb-6 bg-gradient-to-r from-orange-50 to-yellow-50 border-l-4 border-orange-400 p-3 sm:p-4 rounded-lg">
                <div className="flex items-center gap-3">
                  <Icon name="AlertTriangle" size={18} className="text-orange-400 flex-shrink-0" />
                  <div className="min-w-0 flex-1">
                    <p className="text-xs sm:text-sm text-orange-700">
                      <strong>Mode Demo :</strong> <span className="hidden sm:inline">Donn√©es fictives pour test. </span>
                      <button
                        onClick={() => navigate('/school-management')}
                        className="text-orange-600 hover:text-orange-800 font-medium underline"
                      >
                        Se connecter
                      </button>
                    </p>
                  </div>
                </div>
              </div>
            )}

            {/* Indicateur de chargement - Compact */}
            {modeLoading && (
              <div className="mb-4 sm:mb-6 bg-blue-50 border border-blue-200 p-3 sm:p-4 rounded-lg">
                <div className="flex items-center gap-2">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 flex-shrink-0"></div>
                  <span className="text-xs sm:text-sm text-blue-700">Chargement...</span>
                </div>
              </div>
            )}

            {/* Tab Content */}
            <div className="transition-all duration-state">
              {renderTabContent()}
            </div>

            {/* Footer Info - Simplifi√© */}
            <div className="mt-8 sm:mt-12 pt-4 sm:pt-6 border-t border-border">
              <div className="bg-gray-50 rounded-xl p-3 sm:p-4">
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 text-xs sm:text-sm text-muted-foreground">
                  <div className="flex flex-wrap items-center gap-2 sm:gap-4">
                    <div className="flex items-center space-x-2">
                      <div className="w-2 h-2 bg-success rounded-full animate-pulse" />
                      <span className="font-medium">Syst√®me OK</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Icon name="Users" size={12} className="text-blue-600" />
                      <span>{data?.schoolStats?.students || 0} √©l√®ves</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Icon name="GraduationCap" size={12} className="text-green-600" />
                      <span>{data?.schoolStats?.teachers || 0} enseignants</span>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2 sm:space-x-4">
                    <div className="flex items-center space-x-2">
                      <Icon name="Activity" size={12} className="text-green-500" />
                      <span className="hidden sm:inline">Temps r√©el</span>
                      <span className="sm:hidden">Live</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Icon name="Clock" size={12} />
                      <span>{currentTime?.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' })}</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            </div>
          </div>
        </main>
      </div>
    </>
  );
};

export default PrincipalDashboard;